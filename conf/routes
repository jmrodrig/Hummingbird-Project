# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# pages
GET     /                       			controllers.Application.index()
GET     /history/:tag                   controllers.Application.handleTagsIndex(tag: String)
GET			/dashboards							controllers.Application.dashboards()
GET			/library							controllers.Application.library()
GET			/publisher/create/:storyId					controllers.Application.editStory(storyId: Long)
GET 		/profile							controllers.Application.profile()
GET 		/profile/:numberId  	controllers.Application.publicProfile(numberId: Long)
GET     /scraper              controllers.Application.scraper()
GET	    /collection/:collectionId											controllers.Application.openCollectionView(collectionId: Long)



#GET		Read
#POST 		Create
#PUT  		Update
#DELETE		Delete

#Users

GET 		/user						            controllers.Users.getLoggedInUser()
GET     /publicprofile/:numberId             controllers.Users.getUserProfile(numberId: Long)
PUT     /user/update                controllers.Users.updateUserProfile()
POST    /user/uploadavatar           controllers.Users.uploadUserImage()
GET     /user/search/:email         controllers.Users.findUsersByEmail(email: String)
PUT     /follow/collection/:collectionId,:unfollow         controllers.Users.followCollection(collectionId: Long, unfollow: Boolean)
PUT     /user/follow/:numberId        controllers.Users.followUser(numberId: Long)



#Utils
POST 		/fetchhtml									controllers.Application.fetchHtml()
GET 		/fetch/category								controllers.utils.FeedsFetcher.fetchCategories()
GET 		/fetch/category/:id/:options								controllers.utils.FeedsFetcher.fetchItemsFromCategories(id: String, options: String)
GET 		/fetch/item/:id								controllers.utils.FeedsFetcher.fetchItemDetails(id: String)
GET     /fetch/html/:url              controllers.utils.FeedsFetcher.fetchArticle(url: String)
GET     /fetch/html/:url/:levels       controllers.utils.FeedsFetcher.fetchmoreArticle(url: String, levels: Integer)
GET			/validateInvite/:invitationCode				controllers.Application.validInvite(invitationCode: String)
GET			/notify/:storyId							controllers.Application.sendNotification(storyId: Long)
POST    /rules/setRule                controllers.utils.Rules.setNewRule()
GET     /fetchinstagram/:link          controllers.utils.FeedsFetcher.fetchInstagramEmbedHTML(link: String)
GET     /tagsstartingwith=:value            controllers.Application.findLabelsStartingWith(value: String)


#Stories

GET	  /listpublicstories/:index/:size										                                      controllers.Stories.listPublicStories(index: Integer, size: Integer)
GET	  /listpublicfollowingandprivatestories/:index/:size										                  controllers.Stories.listPublicFollowingAndPrivateStories(index: Integer, size: Integer)
GET		/listpublicfollowingandprivatestorieswithlocation/:latitude/:longitude/:index/:size			controllers.Stories.listPublicFollowingAndPrivateStoriesWithLocation(latitude: Double, longitude: Double,index: Integer, size: Integer)
GET		/storiesin/:w,:n,:e,:s				controllers.Stories.listPublishedStoriesWithinBounds(w: Double, n: Double, e: Double, s: Double)
GET		/listuserstories														controllers.Stories.listCurrentUserStories()
GET		/listusersavedstories														controllers.Stories.listCurrentUserSavedStories()
GET		/listuserstories/:numberId														controllers.Stories.listUserStories(numberId: Long)
GET		/listusersavedstories/:numberId														controllers.Stories.listUserSavedStories(numberId: Long)
GET		/story/read/:storyId												controllers.Application.readStory(storyId: Long)
GET		/story/load/:storyId												controllers.Stories.loadStory(storyId: Long)
DELETE	/story/:storyId												controllers.Stories.deleteStory(storyId: Long)
GET	  /story/create														controllers.Application.createStory()
POST	/story/createmobile											controllers.Application.createStoryMobile()
PUT		/story/:storyId												controllers.Stories.updateStory(storyId: Long)
GET		/story/download/:storyId									controllers.Stories.downloadStory(storyId: Long)
POST	/story/uploadthumbnail/:storyId								controllers.Stories.uploadThumbnail(storyId: Long)
POST	/story/uploadimage/:storyId									controllers.Stories.uploadImage(storyId: Long)
POST	/story/publish/:storyId/:published							controllers.Stories.publishStory(storyId: Long, published: Integer)
PUT	/story/like/:storyId												controllers.Stories.likeStory(storyId: Long)
PUT	/story/save/:storyId												controllers.Stories.saveStory(storyId: Long)
DELETE /story/deletethumbnail/:storyId                controllers.Stories.deleteImage(storyId: Long)
GET /highlighted                                  controllers.Application.getHighlightedItems()
GET /highlight/:itemId,:type                                    controllers.Application.highlightItem(itemId: Long, type: Integer)

#Collections
POST	/collection/:name												controllers.Stories.createStoryCollection(name: String)
PUT	  /collection/:collectionId												controllers.Stories.updateStoryCollection(collectionId: Long)
POST	/collection/:collectionId/story/:storyId												controllers.Stories.addStoryToCollection(collectionId: Long, storyId: Long)
PUT	  /collection/:collectionId/story/:storyId												controllers.Stories.removeStoryFromCollection(collectionId: Long, storyId: Long)
GET	  /collection/stories/:collectionId											controllers.Stories.readCollectionStories(collectionId: Long)
GET	  /public/collection/stories/:collectionId											controllers.Stories.readPublicCollectionStories(collectionId: Long)
GET	  /collection/details/:collectionId											controllers.Stories.readCollection(collectionId: Long)
POST	/collection/:collectionId/uploadimage									controllers.Stories.uploadCollectionImage(collectionId: Long)
PUT	/collection/:collectionId/adduser/:numberId									controllers.Stories.addUserToCollection(collectionId: Long, numberId: Long)
PUT /collection/:collectionId/connect/:story1Id,:story2Id       controllers.Stories.connectStories(collectionId: Long, story1Id: Long, story2Id: Long)
PUT /collection/:collectionId/disconnect/:story1Id,:story2Id       controllers.Stories.disconnectStories(collectionId: Long, story1Id: Long, story2Id: Long)
POST /collection/:collectionId/create                               controllers.Stories.createStoryOnCollection(collectionId: Long)
PUT /collection/:collectionId/publish/:publish                               controllers.Stories.publishCollection(collectionId: Long, publish: Integer)

#Map
GET		/map														controllers.Maps.index()

#Files
PUT		/files/public												controllers.Files.uploadPublic()

#Test
GET 	/testajax													controllers.Application.testAjax()

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.at(path="/public", file)
GET     /uploads/*file              controllers.UploadedAssets.at(path="/private/upload", file)
GET     /.well-known/assetlinks.json        controllers.Assets.at(path="/public", file="assetlinks.json")

# Login page
GET     /login                      securesocial.controllers.LoginPage.login
GET     /logout                     securesocial.controllers.LoginPage.logout

# User Registration and password handling (only needed if you are using UsernamePasswordProvider)
GET     /signup                     securesocial.controllers.Registration.startSignUp
POST    /signup                     securesocial.controllers.Registration.handleStartSignUp
GET     /signup/:token              securesocial.controllers.Registration.signUp(token)
POST    /signup/:token              securesocial.controllers.Registration.handleSignUp(token)
GET     /reset                      securesocial.controllers.Registration.startResetPassword
POST    /reset                      securesocial.controllers.Registration.handleStartResetPassword
GET     /reset/:token               securesocial.controllers.Registration.resetPassword(token)
POST    /reset/:token               securesocial.controllers.Registration.handleResetPassword(token)
GET     /password                   securesocial.controllers.PasswordChange.page
POST    /password                   securesocial.controllers.PasswordChange.handlePasswordChange


# Providers entry points
GET     /authenticate/:provider       securesocial.controllers.ProviderController.authenticate(provider)
POST    /authenticate/:provider       securesocial.controllers.ProviderController.authenticateByPost(provider)
GET     /not-authorized               securesocial.controllers.ProviderController.notAuthorized
POST    /authenticatemobile/:provider @controllers.auth.AuthController.authenticateMobile(provider)
